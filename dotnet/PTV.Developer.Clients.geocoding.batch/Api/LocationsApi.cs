/*
 * Geocoding Batch
 *
 * With the Batch Geocoding service you can find a large number of locations.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.geocoding.batch.Client;
using PTV.Developer.Clients.geocoding.batch.Model;

namespace PTV.Developer.Clients.geocoding.batch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResponse</returns>
        IdResponse CreateLocationsByAddresses(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> CreateLocationsByAddressesWithHttpInfo(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResponse</returns>
        IdResponse CreateLocationsByPositions(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> CreateLocationsByPositionsWithHttpInfo(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResponse</returns>
        IdResponse CreateLocationsByTexts(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> CreateLocationsByTextsWithHttpInfo(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLocationsByAddresses(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocationsByAddressesWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLocationsByPositions(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocationsByPositionsWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLocationsByTexts(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocationsByTextsWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResponse</returns>
        LocationsSearchResponse GetLocationsByAddresses(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResponse</returns>
        ApiResponse<LocationsSearchResponse> GetLocationsByAddressesWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchStatusResponse</returns>
        LocationsSearchStatusResponse GetLocationsByAddressesStatus(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchStatusResponse</returns>
        ApiResponse<LocationsSearchStatusResponse> GetLocationsByAddressesStatusWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResponse</returns>
        LocationsSearchResponse GetLocationsByPositions(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResponse</returns>
        ApiResponse<LocationsSearchResponse> GetLocationsByPositionsWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchStatusResponse</returns>
        LocationsSearchStatusResponse GetLocationsByPositionsStatus(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchStatusResponse</returns>
        ApiResponse<LocationsSearchStatusResponse> GetLocationsByPositionsStatusWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResponse</returns>
        LocationsSearchResponse GetLocationsByTexts(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResponse</returns>
        ApiResponse<LocationsSearchResponse> GetLocationsByTextsWithHttpInfo(Guid? id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchStatusResponse</returns>
        LocationsSearchStatusResponse GetLocationsByTextsStatus(Guid? id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchStatusResponse</returns>
        ApiResponse<LocationsSearchStatusResponse> GetLocationsByTextsStatusWithHttpInfo(Guid? id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> CreateLocationsByAddressesAsync(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> CreateLocationsByAddressesWithHttpInfoAsync(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> CreateLocationsByPositionsAsync(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> CreateLocationsByPositionsWithHttpInfoAsync(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> CreateLocationsByTextsAsync(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a search request for locations based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> CreateLocationsByTextsWithHttpInfoAsync(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocationsByAddressesAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocationsByAddressesWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocationsByPositionsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocationsByPositionsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocationsByTextsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocationsByTextsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResponse</returns>
        System.Threading.Tasks.Task<LocationsSearchResponse> GetLocationsByAddressesAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchResponse>> GetLocationsByAddressesWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchStatusResponse</returns>
        System.Threading.Tasks.Task<LocationsSearchStatusResponse> GetLocationsByAddressesStatusAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of structured address inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchStatusResponse>> GetLocationsByAddressesStatusWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResponse</returns>
        System.Threading.Tasks.Task<LocationsSearchResponse> GetLocationsByPositionsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchResponse>> GetLocationsByPositionsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchStatusResponse</returns>
        System.Threading.Tasks.Task<LocationsSearchStatusResponse> GetLocationsByPositionsStatusAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of positions.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchStatusResponse>> GetLocationsByPositionsStatusWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResponse</returns>
        System.Threading.Tasks.Task<LocationsSearchResponse> GetLocationsByTextsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchResponse>> GetLocationsByTextsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchStatusResponse</returns>
        System.Threading.Tasks.Task<LocationsSearchStatusResponse> GetLocationsByTextsStatusAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchStatusResponse>> GetLocationsByTextsStatusWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApi : ILocationsApiSync, ILocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationsApi : ILocationsApi
    {
        private PTV.Developer.Clients.geocoding.batch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.geocoding.batch.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.geocoding.batch.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.geocoding.batch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.geocoding.batch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.geocoding.batch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.geocoding.batch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationsApi(PTV.Developer.Clients.geocoding.batch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.geocoding.batch.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.geocoding.batch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.geocoding.batch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.geocoding.batch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.geocoding.batch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocationsApi(PTV.Developer.Clients.geocoding.batch.Client.ISynchronousClient client, PTV.Developer.Clients.geocoding.batch.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.geocoding.batch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.geocoding.batch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.geocoding.batch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.geocoding.batch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.geocoding.batch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.geocoding.batch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResponse</returns>
        public IdResponse CreateLocationsByAddresses(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> localVarResponse = CreateLocationsByAddressesWithHttpInfo(addressesRequest, countryFilter, language, totalScoreType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> CreateLocationsByAddressesWithHttpInfo(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0)
        {
            // verify the required parameter 'addressesRequest' is set
            if (addressesRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'addressesRequest' when calling LocationsApi->CreateLocationsByAddresses");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (totalScoreType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "totalScoreType", totalScoreType));
            }
            localVarRequestOptions.Data = addressesRequest;

            localVarRequestOptions.Operation = "LocationsApi.CreateLocationsByAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdResponse>("/locations/by-addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocationsByAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> CreateLocationsByAddressesAsync(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> localVarResponse = await CreateLocationsByAddressesWithHttpInfoAsync(addressesRequest, countryFilter, language, totalScoreType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressesRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse>> CreateLocationsByAddressesWithHttpInfoAsync(AddressesRequest addressesRequest, List<string> countryFilter = default(List<string>), string language = default(string), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'addressesRequest' is set
            if (addressesRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'addressesRequest' when calling LocationsApi->CreateLocationsByAddresses");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (totalScoreType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "totalScoreType", totalScoreType));
            }
            localVarRequestOptions.Data = addressesRequest;

            localVarRequestOptions.Operation = "LocationsApi.CreateLocationsByAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdResponse>("/locations/by-addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocationsByAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResponse</returns>
        public IdResponse CreateLocationsByPositions(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> localVarResponse = CreateLocationsByPositionsWithHttpInfo(positionsRequest, language, minimumPopulation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> CreateLocationsByPositionsWithHttpInfo(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'positionsRequest' is set
            if (positionsRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'positionsRequest' when calling LocationsApi->CreateLocationsByPositions");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minimumPopulation != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "minimumPopulation", minimumPopulation));
            }
            localVarRequestOptions.Data = positionsRequest;

            localVarRequestOptions.Operation = "LocationsApi.CreateLocationsByPositions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdResponse>("/locations/by-positions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocationsByPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> CreateLocationsByPositionsAsync(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> localVarResponse = await CreateLocationsByPositionsWithHttpInfoAsync(positionsRequest, language, minimumPopulation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="positionsRequest"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse>> CreateLocationsByPositionsWithHttpInfoAsync(PositionsRequest positionsRequest, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'positionsRequest' is set
            if (positionsRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'positionsRequest' when calling LocationsApi->CreateLocationsByPositions");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minimumPopulation != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "minimumPopulation", minimumPopulation));
            }
            localVarRequestOptions.Data = positionsRequest;

            localVarRequestOptions.Operation = "LocationsApi.CreateLocationsByPositions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdResponse>("/locations/by-positions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocationsByPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResponse</returns>
        public IdResponse CreateLocationsByTexts(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> localVarResponse = CreateLocationsByTextsWithHttpInfo(textsRequest, countryFilter, language, cleanInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> CreateLocationsByTextsWithHttpInfo(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'textsRequest' is set
            if (textsRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'textsRequest' when calling LocationsApi->CreateLocationsByTexts");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (cleanInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "cleanInput", cleanInput));
            }
            localVarRequestOptions.Data = textsRequest;

            localVarRequestOptions.Operation = "LocationsApi.CreateLocationsByTexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdResponse>("/locations/by-texts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocationsByTexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> CreateLocationsByTextsAsync(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse> localVarResponse = await CreateLocationsByTextsWithHttpInfoAsync(textsRequest, countryFilter, language, cleanInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a search request for locations based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textsRequest"></param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<IdResponse>> CreateLocationsByTextsWithHttpInfoAsync(TextsRequest textsRequest, List<string> countryFilter = default(List<string>), string language = default(string), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'textsRequest' is set
            if (textsRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'textsRequest' when calling LocationsApi->CreateLocationsByTexts");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (cleanInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToMultiMap("", "cleanInput", cleanInput));
            }
            localVarRequestOptions.Data = textsRequest;

            localVarRequestOptions.Operation = "LocationsApi.CreateLocationsByTexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdResponse>("/locations/by-texts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocationsByTexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLocationsByAddresses(Guid? id, int operationIndex = 0)
        {
            DeleteLocationsByAddressesWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<Object> DeleteLocationsByAddressesWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->DeleteLocationsByAddresses");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.DeleteLocationsByAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/locations/by-addresses/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocationsByAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocationsByAddressesAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteLocationsByAddressesWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<Object>> DeleteLocationsByAddressesWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->DeleteLocationsByAddresses");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.DeleteLocationsByAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/locations/by-addresses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocationsByAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLocationsByPositions(Guid? id, int operationIndex = 0)
        {
            DeleteLocationsByPositionsWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<Object> DeleteLocationsByPositionsWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->DeleteLocationsByPositions");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.DeleteLocationsByPositions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/locations/by-positions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocationsByPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocationsByPositionsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteLocationsByPositionsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<Object>> DeleteLocationsByPositionsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->DeleteLocationsByPositions");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.DeleteLocationsByPositions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/locations/by-positions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocationsByPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLocationsByTexts(Guid? id, int operationIndex = 0)
        {
            DeleteLocationsByTextsWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<Object> DeleteLocationsByTextsWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->DeleteLocationsByTexts");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.DeleteLocationsByTexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/locations/by-texts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocationsByTexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocationsByTextsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteLocationsByTextsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<Object>> DeleteLocationsByTextsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->DeleteLocationsByTexts");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.DeleteLocationsByTexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/locations/by-texts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocationsByTexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResponse</returns>
        public LocationsSearchResponse GetLocationsByAddresses(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> localVarResponse = GetLocationsByAddressesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> GetLocationsByAddressesWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByAddresses");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchResponse>("/locations/by-addresses/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResponse</returns>
        public async System.Threading.Tasks.Task<LocationsSearchResponse> GetLocationsByAddressesAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> localVarResponse = await GetLocationsByAddressesWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse>> GetLocationsByAddressesWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByAddresses");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchResponse>("/locations/by-addresses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchStatusResponse</returns>
        public LocationsSearchStatusResponse GetLocationsByAddressesStatus(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> localVarResponse = GetLocationsByAddressesStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchStatusResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> GetLocationsByAddressesStatusWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByAddressesStatus");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByAddressesStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchStatusResponse>("/locations/by-addresses/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByAddressesStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchStatusResponse</returns>
        public async System.Threading.Tasks.Task<LocationsSearchStatusResponse> GetLocationsByAddressesStatusAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> localVarResponse = await GetLocationsByAddressesStatusWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of structured address inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchStatusResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse>> GetLocationsByAddressesStatusWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByAddressesStatus");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByAddressesStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchStatusResponse>("/locations/by-addresses/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByAddressesStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResponse</returns>
        public LocationsSearchResponse GetLocationsByPositions(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> localVarResponse = GetLocationsByPositionsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> GetLocationsByPositionsWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByPositions");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByPositions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchResponse>("/locations/by-positions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResponse</returns>
        public async System.Threading.Tasks.Task<LocationsSearchResponse> GetLocationsByPositionsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> localVarResponse = await GetLocationsByPositionsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse>> GetLocationsByPositionsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByPositions");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByPositions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchResponse>("/locations/by-positions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByPositions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchStatusResponse</returns>
        public LocationsSearchStatusResponse GetLocationsByPositionsStatus(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> localVarResponse = GetLocationsByPositionsStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchStatusResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> GetLocationsByPositionsStatusWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByPositionsStatus");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByPositionsStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchStatusResponse>("/locations/by-positions/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByPositionsStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchStatusResponse</returns>
        public async System.Threading.Tasks.Task<LocationsSearchStatusResponse> GetLocationsByPositionsStatusAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> localVarResponse = await GetLocationsByPositionsStatusWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of positions.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchStatusResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse>> GetLocationsByPositionsStatusWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByPositionsStatus");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByPositionsStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchStatusResponse>("/locations/by-positions/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByPositionsStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResponse</returns>
        public LocationsSearchResponse GetLocationsByTexts(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> localVarResponse = GetLocationsByTextsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> GetLocationsByTextsWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByTexts");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByTexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchResponse>("/locations/by-texts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByTexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResponse</returns>
        public async System.Threading.Tasks.Task<LocationsSearchResponse> GetLocationsByTextsAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse> localVarResponse = await GetLocationsByTextsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the results of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchResponse>> GetLocationsByTextsWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByTexts");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByTexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchResponse>("/locations/by-texts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByTexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchStatusResponse</returns>
        public LocationsSearchStatusResponse GetLocationsByTextsStatus(Guid? id, int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> localVarResponse = GetLocationsByTextsStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchStatusResponse</returns>
        public PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> GetLocationsByTextsStatusWithHttpInfo(Guid? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByTextsStatus");
            }

            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByTextsStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchStatusResponse>("/locations/by-texts/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByTextsStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchStatusResponse</returns>
        public async System.Threading.Tasks.Task<LocationsSearchStatusResponse> GetLocationsByTextsStatusAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse> localVarResponse = await GetLocationsByTextsStatusWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status of a locations search based on a list of single-field text inputs.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.batch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the batch geocoding request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchStatusResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.batch.Client.ApiResponse<LocationsSearchStatusResponse>> GetLocationsByTextsStatusWithHttpInfoAsync(Guid? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new PTV.Developer.Clients.geocoding.batch.Client.ApiException(400, "Missing required parameter 'id' when calling LocationsApi->GetLocationsByTextsStatus");
            }


            PTV.Developer.Clients.geocoding.batch.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.batch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.geocoding.batch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LocationsApi.GetLocationsByTextsStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchStatusResponse>("/locations/by-texts/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocationsByTextsStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
