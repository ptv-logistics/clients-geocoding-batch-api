/*
 * Geocoding Batch
 *
 * With the Batch Geocoding service you can find a large number of locations.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.geocoding.batch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.geocoding.batch.Model
{
    /// <summary>
    /// Quality indicators that help deciding how well a result fits to the search input.    This is only available for **searchLocationsByText** and **searchLocationsByAddress** results.
    /// </summary>
    [DataContract(Name = "AddressScores")]
    public partial class AddressScores : IEquatable<AddressScores>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressScores" /> class.
        /// </summary>
        /// <param name="country">The score for the returned country in \\[%\\]..</param>
        /// <param name="state">The score for the returned state in \\[%\\]..</param>
        /// <param name="province">The score for the returned province in \\[%\\]..</param>
        /// <param name="postalCode">The score for the returned postalCode in \\[%\\]..</param>
        /// <param name="city">The score for the returned city in \\[%\\]..</param>
        /// <param name="district">The score for the returned district in \\[%\\]..</param>
        /// <param name="subDistrict">The score for the returned subdistrict in \\[%\\]..</param>
        /// <param name="street">The score for the returned street in \\[%\\]..</param>
        /// <param name="houseNumber">The score for the returned house number in \\[%\\]..</param>
        public AddressScores(int? country = default(int?), int? state = default(int?), int? province = default(int?), int? postalCode = default(int?), int? city = default(int?), int? district = default(int?), int? subDistrict = default(int?), int? street = default(int?), int? houseNumber = default(int?))
        {
            this.Country = country;
            this.State = state;
            this.Province = province;
            this.PostalCode = postalCode;
            this.City = city;
            this.District = district;
            this.SubDistrict = subDistrict;
            this.Street = street;
            this.HouseNumber = houseNumber;
        }

        /// <summary>
        /// The score for the returned country in \\[%\\].
        /// </summary>
        /// <value>The score for the returned country in \\[%\\].</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public int? Country { get; set; }

        /// <summary>
        /// The score for the returned state in \\[%\\].
        /// </summary>
        /// <value>The score for the returned state in \\[%\\].</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public int? State { get; set; }

        /// <summary>
        /// The score for the returned province in \\[%\\].
        /// </summary>
        /// <value>The score for the returned province in \\[%\\].</value>
        [DataMember(Name = "province", EmitDefaultValue = true)]
        public int? Province { get; set; }

        /// <summary>
        /// The score for the returned postalCode in \\[%\\].
        /// </summary>
        /// <value>The score for the returned postalCode in \\[%\\].</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = true)]
        public int? PostalCode { get; set; }

        /// <summary>
        /// The score for the returned city in \\[%\\].
        /// </summary>
        /// <value>The score for the returned city in \\[%\\].</value>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public int? City { get; set; }

        /// <summary>
        /// The score for the returned district in \\[%\\].
        /// </summary>
        /// <value>The score for the returned district in \\[%\\].</value>
        [DataMember(Name = "district", EmitDefaultValue = true)]
        public int? District { get; set; }

        /// <summary>
        /// The score for the returned subdistrict in \\[%\\].
        /// </summary>
        /// <value>The score for the returned subdistrict in \\[%\\].</value>
        [DataMember(Name = "subDistrict", EmitDefaultValue = true)]
        public int? SubDistrict { get; set; }

        /// <summary>
        /// The score for the returned street in \\[%\\].
        /// </summary>
        /// <value>The score for the returned street in \\[%\\].</value>
        [DataMember(Name = "street", EmitDefaultValue = true)]
        public int? Street { get; set; }

        /// <summary>
        /// The score for the returned house number in \\[%\\].
        /// </summary>
        /// <value>The score for the returned house number in \\[%\\].</value>
        [DataMember(Name = "houseNumber", EmitDefaultValue = true)]
        public int? HouseNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressScores {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  SubDistrict: ").Append(SubDistrict).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressScores);
        }

        /// <summary>
        /// Returns true if AddressScores instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressScores to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressScores input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.SubDistrict == input.SubDistrict ||
                    (this.SubDistrict != null &&
                    this.SubDistrict.Equals(input.SubDistrict))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.HouseNumber == input.HouseNumber ||
                    (this.HouseNumber != null &&
                    this.HouseNumber.Equals(input.HouseNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Province != null)
                {
                    hashCode = (hashCode * 59) + this.Province.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.District != null)
                {
                    hashCode = (hashCode * 59) + this.District.GetHashCode();
                }
                if (this.SubDistrict != null)
                {
                    hashCode = (hashCode * 59) + this.SubDistrict.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.HouseNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HouseNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
