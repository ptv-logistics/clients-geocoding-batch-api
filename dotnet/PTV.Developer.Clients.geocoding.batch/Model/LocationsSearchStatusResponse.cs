/*
 * Geocoding Batch
 *
 * With the Batch Geocoding service you can find a large number of locations.
 *
 * The version of the OpenAPI document: 1.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.geocoding.batch.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.geocoding.batch.Model
{
    /// <summary>
    /// LocationsSearchStatusResponse
    /// </summary>
    [DataContract(Name = "LocationsSearchStatusResponse")]
    public partial class LocationsSearchStatusResponse : IEquatable<LocationsSearchStatusResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public Status Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsSearchStatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationsSearchStatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsSearchStatusResponse" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="progress">The progress of the geocoding request in \\[%\\]. (required).</param>
        public LocationsSearchStatusResponse(Status status = default(Status), int? progress = default(int?))
        {
            this.Status = status;
            // to ensure "progress" is required (not null)
            if (progress == null)
            {
                throw new ArgumentNullException("progress is a required property for LocationsSearchStatusResponse and cannot be null");
            }
            this.Progress = progress;
        }

        /// <summary>
        /// The progress of the geocoding request in \\[%\\].
        /// </summary>
        /// <value>The progress of the geocoding request in \\[%\\].</value>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = true)]
        public int? Progress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationsSearchStatusResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationsSearchStatusResponse);
        }

        /// <summary>
        /// Returns true if LocationsSearchStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationsSearchStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationsSearchStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Progress != null)
                {
                    hashCode = (hashCode * 59) + this.Progress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
