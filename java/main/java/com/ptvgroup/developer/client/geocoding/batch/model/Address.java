/*
 * Geocoding Batch
 * With the Batch Geocoding service you can find a large number of locations.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.geocoding.batch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.geocoding.batch.ApiClient;
/**
 * Represents the address of a geographical object. Whenever a string, such as a city or street name, is available in multiple languages, it is returned in the default language specified by the country in which an object is located. Most of the fields are optional, because addressing schemes vary strongly between countries.
 */
@JsonPropertyOrder({
  Address.JSON_PROPERTY_COUNTRY_NAME,
  Address.JSON_PROPERTY_STATE,
  Address.JSON_PROPERTY_PROVINCE,
  Address.JSON_PROPERTY_POSTAL_CODE,
  Address.JSON_PROPERTY_CITY,
  Address.JSON_PROPERTY_DISTRICT,
  Address.JSON_PROPERTY_SUBDISTRICT,
  Address.JSON_PROPERTY_STREET,
  Address.JSON_PROPERTY_HOUSE_NUMBER,
  Address.JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA2,
  Address.JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA3,
  Address.JSON_PROPERTY_COUNTRY_CODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T10:23:49.716906276Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Address {
  public static final String JSON_PROPERTY_COUNTRY_NAME = "countryName";
  private String countryName;

  public static final String JSON_PROPERTY_STATE = "state";
  private String state;

  public static final String JSON_PROPERTY_PROVINCE = "province";
  private String province;

  public static final String JSON_PROPERTY_POSTAL_CODE = "postalCode";
  private String postalCode;

  public static final String JSON_PROPERTY_CITY = "city";
  private String city;

  public static final String JSON_PROPERTY_DISTRICT = "district";
  private String district;

  public static final String JSON_PROPERTY_SUBDISTRICT = "subdistrict";
  private String subdistrict;

  public static final String JSON_PROPERTY_STREET = "street";
  private String street;

  public static final String JSON_PROPERTY_HOUSE_NUMBER = "houseNumber";
  private String houseNumber;

  public static final String JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA2 = "countryCodeIsoAlpha2";
  private String countryCodeIsoAlpha2;

  public static final String JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA3 = "countryCodeIsoAlpha3";
  private String countryCodeIsoAlpha3;

  public static final String JSON_PROPERTY_COUNTRY_CODE = "countryCode";
  private String countryCode;

  public Address() { 
  }

  public Address countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * The country. In a response, it is represented by its full name (not abbreviated or encoded).
   * @return countryName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCountryName() {
    return countryName;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public Address state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The name of the principal country subdivision which the address belongs to (for example, a state in the USA, or a canton in Switzerland).
   * @return state
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }


  public Address province(String province) {
    this.province = province;
    return this;
  }

  /**
   * The name of the second-level country subdivision which the address belongs to (for example, a county in the UK, or a province in Italy).
   * @return province
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROVINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getProvince() {
    return province;
  }


  @JsonProperty(JSON_PROPERTY_PROVINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProvince(String province) {
    this.province = province;
  }


  public Address postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The postal code of the address.
   * @return postalCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPostalCode() {
    return postalCode;
  }


  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Address city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city of the address, i.e. the highest entity at the communal level which the address belongs to.
   * @return city
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCity() {
    return city;
  }


  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCity(String city) {
    this.city = city;
  }


  public Address district(String district) {
    this.district = district;
    return this;
  }

  /**
   * The district of the address, i.e. the entity below city.
   * @return district
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDistrict() {
    return district;
  }


  @JsonProperty(JSON_PROPERTY_DISTRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistrict(String district) {
    this.district = district;
  }


  public Address subdistrict(String subdistrict) {
    this.subdistrict = subdistrict;
    return this;
  }

  /**
   * The subdistrict of the address, i.e. the entity below district.
   * @return subdistrict
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBDISTRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSubdistrict() {
    return subdistrict;
  }


  @JsonProperty(JSON_PROPERTY_SUBDISTRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubdistrict(String subdistrict) {
    this.subdistrict = subdistrict;
  }


  public Address street(String street) {
    this.street = street;
    return this;
  }

  /**
   * The street of the address.
   * @return street
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStreet() {
    return street;
  }


  @JsonProperty(JSON_PROPERTY_STREET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreet(String street) {
    this.street = street;
  }


  public Address houseNumber(String houseNumber) {
    this.houseNumber = houseNumber;
    return this;
  }

  /**
   * The house number of the address.
   * @return houseNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOUSE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHouseNumber() {
    return houseNumber;
  }


  @JsonProperty(JSON_PROPERTY_HOUSE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHouseNumber(String houseNumber) {
    this.houseNumber = houseNumber;
  }


  public Address countryCodeIsoAlpha2(String countryCodeIsoAlpha2) {
    this.countryCodeIsoAlpha2 = countryCodeIsoAlpha2;
    return this;
  }

  /**
   * The country code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   * @return countryCodeIsoAlpha2
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCountryCodeIsoAlpha2() {
    return countryCodeIsoAlpha2;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryCodeIsoAlpha2(String countryCodeIsoAlpha2) {
    this.countryCodeIsoAlpha2 = countryCodeIsoAlpha2;
  }


  public Address countryCodeIsoAlpha3(String countryCodeIsoAlpha3) {
    this.countryCodeIsoAlpha3 = countryCodeIsoAlpha3;
    return this;
  }

  /**
   * The country code according to [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).
   * @return countryCodeIsoAlpha3
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA3)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCountryCodeIsoAlpha3() {
    return countryCodeIsoAlpha3;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE_ISO_ALPHA3)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryCodeIsoAlpha3(String countryCodeIsoAlpha3) {
    this.countryCodeIsoAlpha3 = countryCodeIsoAlpha3;
  }


  public Address countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country or subdivision represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
   * @return countryCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCountryCode() {
    return countryCode;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  /**
   * Return true if this Address object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.countryName, address.countryName) &&
        Objects.equals(this.state, address.state) &&
        Objects.equals(this.province, address.province) &&
        Objects.equals(this.postalCode, address.postalCode) &&
        Objects.equals(this.city, address.city) &&
        Objects.equals(this.district, address.district) &&
        Objects.equals(this.subdistrict, address.subdistrict) &&
        Objects.equals(this.street, address.street) &&
        Objects.equals(this.houseNumber, address.houseNumber) &&
        Objects.equals(this.countryCodeIsoAlpha2, address.countryCodeIsoAlpha2) &&
        Objects.equals(this.countryCodeIsoAlpha3, address.countryCodeIsoAlpha3) &&
        Objects.equals(this.countryCode, address.countryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryName, state, province, postalCode, city, district, subdistrict, street, houseNumber, countryCodeIsoAlpha2, countryCodeIsoAlpha3, countryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    subdistrict: ").append(toIndentedString(subdistrict)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    houseNumber: ").append(toIndentedString(houseNumber)).append("\n");
    sb.append("    countryCodeIsoAlpha2: ").append(toIndentedString(countryCodeIsoAlpha2)).append("\n");
    sb.append("    countryCodeIsoAlpha3: ").append(toIndentedString(countryCodeIsoAlpha3)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `countryName` to the URL query string
    if (getCountryName() != null) {
      joiner.add(String.format("%scountryName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCountryName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `state` to the URL query string
    if (getState() != null) {
      joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `province` to the URL query string
    if (getProvince() != null) {
      joiner.add(String.format("%sprovince%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getProvince()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `postalCode` to the URL query string
    if (getPostalCode() != null) {
      joiner.add(String.format("%spostalCode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPostalCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `city` to the URL query string
    if (getCity() != null) {
      joiner.add(String.format("%scity%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `district` to the URL query string
    if (getDistrict() != null) {
      joiner.add(String.format("%sdistrict%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDistrict()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `subdistrict` to the URL query string
    if (getSubdistrict() != null) {
      joiner.add(String.format("%ssubdistrict%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSubdistrict()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `street` to the URL query string
    if (getStreet() != null) {
      joiner.add(String.format("%sstreet%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStreet()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `houseNumber` to the URL query string
    if (getHouseNumber() != null) {
      joiner.add(String.format("%shouseNumber%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHouseNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `countryCodeIsoAlpha2` to the URL query string
    if (getCountryCodeIsoAlpha2() != null) {
      joiner.add(String.format("%scountryCodeIsoAlpha2%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCountryCodeIsoAlpha2()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `countryCodeIsoAlpha3` to the URL query string
    if (getCountryCodeIsoAlpha3() != null) {
      joiner.add(String.format("%scountryCodeIsoAlpha3%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCountryCodeIsoAlpha3()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `countryCode` to the URL query string
    if (getCountryCode() != null) {
      joiner.add(String.format("%scountryCode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCountryCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

