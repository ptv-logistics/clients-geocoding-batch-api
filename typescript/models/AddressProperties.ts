/* tslint:disable */
/* eslint-disable */
/**
 * Geocoding Batch
 * With the Batch Geocoding service you can find a large number of locations.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddressProperties
 */
export interface AddressProperties {
    /**
     * The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate.
     * @type {string}
     * @memberof AddressProperties
     */
    country?: string;
    /**
     * A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results.
     * @type {string}
     * @memberof AddressProperties
     */
    state?: string;
    /**
     * The locality of the address, which may be a city, a district or subdistrict.
     * @type {string}
     * @memberof AddressProperties
     */
    locality?: string;
    /**
     * The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located.
     * @type {string}
     * @memberof AddressProperties
     */
    postalCode?: string;
    /**
     * The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results.
     * @type {string}
     * @memberof AddressProperties
     */
    street?: string;
    /**
     * The house number of the address.
     * @type {string}
     * @memberof AddressProperties
     */
    houseNumber?: string;
}

/**
 * Check if a given object implements the AddressProperties interface.
 */
export function instanceOfAddressProperties(value: object): value is AddressProperties {
    return true;
}

export function AddressPropertiesFromJSON(json: any): AddressProperties {
    return AddressPropertiesFromJSONTyped(json, false);
}

export function AddressPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressProperties {
    if (json == null) {
        return json;
    }
    return {
        
        'country': json['country'] == null ? undefined : json['country'],
        'state': json['state'] == null ? undefined : json['state'],
        'locality': json['locality'] == null ? undefined : json['locality'],
        'postalCode': json['postalCode'] == null ? undefined : json['postalCode'],
        'street': json['street'] == null ? undefined : json['street'],
        'houseNumber': json['houseNumber'] == null ? undefined : json['houseNumber'],
    };
}

export function AddressPropertiesToJSON(value?: AddressProperties | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'country': value['country'],
        'state': value['state'],
        'locality': value['locality'],
        'postalCode': value['postalCode'],
        'street': value['street'],
        'houseNumber': value['houseNumber'],
    };
}

