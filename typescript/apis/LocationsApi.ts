/* tslint:disable */
/* eslint-disable */
/**
 * Geocoding Batch
 * With the Batch Geocoding service you can find a large number of locations.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressesRequest,
  ErrorResponse,
  IdResponse,
  LocationsSearchResponse,
  LocationsSearchStatusResponse,
  PositionsRequest,
  TextsRequest,
  TotalScoreType,
} from '../models/index';
import {
    AddressesRequestFromJSON,
    AddressesRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    IdResponseFromJSON,
    IdResponseToJSON,
    LocationsSearchResponseFromJSON,
    LocationsSearchResponseToJSON,
    LocationsSearchStatusResponseFromJSON,
    LocationsSearchStatusResponseToJSON,
    PositionsRequestFromJSON,
    PositionsRequestToJSON,
    TextsRequestFromJSON,
    TextsRequestToJSON,
    TotalScoreTypeFromJSON,
    TotalScoreTypeToJSON,
} from '../models/index';

export interface CreateLocationsByAddressesRequest {
    addressesRequest: AddressesRequest;
    countryFilter?: Array<string>;
    language?: string;
    totalScoreType?: TotalScoreType;
}

export interface CreateLocationsByPositionsRequest {
    positionsRequest: PositionsRequest;
    language?: string;
    minimumPopulation?: number;
}

export interface CreateLocationsByTextsRequest {
    textsRequest: TextsRequest;
    countryFilter?: Array<string>;
    language?: string;
    cleanInput?: boolean;
}

export interface DeleteLocationsByAddressesRequest {
    id: string;
}

export interface DeleteLocationsByPositionsRequest {
    id: string;
}

export interface DeleteLocationsByTextsRequest {
    id: string;
}

export interface GetLocationsByAddressesRequest {
    id: string;
}

export interface GetLocationsByAddressesStatusRequest {
    id: string;
}

export interface GetLocationsByPositionsRequest {
    id: string;
}

export interface GetLocationsByPositionsStatusRequest {
    id: string;
}

export interface GetLocationsByTextsRequest {
    id: string;
}

export interface GetLocationsByTextsStatusRequest {
    id: string;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     * Creates a search request for locations based on a list of structured address inputs.
     */
    async createLocationsByAddressesRaw(requestParameters: CreateLocationsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['addressesRequest'] == null) {
            throw new runtime.RequiredError(
                'addressesRequest',
                'Required parameter "addressesRequest" was null or undefined when calling createLocationsByAddresses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['countryFilter'] != null) {
            queryParameters['countryFilter'] = requestParameters['countryFilter']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['totalScoreType'] != null) {
            queryParameters['totalScoreType'] = requestParameters['totalScoreType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressesRequestToJSON(requestParameters['addressesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Creates a search request for locations based on a list of structured address inputs.
     */
    async createLocationsByAddresses(requestParameters: CreateLocationsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.createLocationsByAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a search request for locations based on a list of positions.
     */
    async createLocationsByPositionsRaw(requestParameters: CreateLocationsByPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['positionsRequest'] == null) {
            throw new runtime.RequiredError(
                'positionsRequest',
                'Required parameter "positionsRequest" was null or undefined when calling createLocationsByPositions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['minimumPopulation'] != null) {
            queryParameters['minimumPopulation'] = requestParameters['minimumPopulation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-positions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PositionsRequestToJSON(requestParameters['positionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Creates a search request for locations based on a list of positions.
     */
    async createLocationsByPositions(requestParameters: CreateLocationsByPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.createLocationsByPositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a search request for locations based on a list of single-field text inputs.
     */
    async createLocationsByTextsRaw(requestParameters: CreateLocationsByTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['textsRequest'] == null) {
            throw new runtime.RequiredError(
                'textsRequest',
                'Required parameter "textsRequest" was null or undefined when calling createLocationsByTexts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['countryFilter'] != null) {
            queryParameters['countryFilter'] = requestParameters['countryFilter']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['cleanInput'] != null) {
            queryParameters['cleanInput'] = requestParameters['cleanInput'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-texts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TextsRequestToJSON(requestParameters['textsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Creates a search request for locations based on a list of single-field text inputs.
     */
    async createLocationsByTexts(requestParameters: CreateLocationsByTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.createLocationsByTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the results of a locations search based on a list of structured address inputs.
     */
    async deleteLocationsByAddressesRaw(requestParameters: DeleteLocationsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteLocationsByAddresses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the results of a locations search based on a list of structured address inputs.
     */
    async deleteLocationsByAddresses(requestParameters: DeleteLocationsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocationsByAddressesRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the results of a locations search based on a list of positions.
     */
    async deleteLocationsByPositionsRaw(requestParameters: DeleteLocationsByPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteLocationsByPositions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the results of a locations search based on a list of positions.
     */
    async deleteLocationsByPositions(requestParameters: DeleteLocationsByPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocationsByPositionsRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the results of a locations search based on a list of single-field text inputs.
     */
    async deleteLocationsByTextsRaw(requestParameters: DeleteLocationsByTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteLocationsByTexts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-texts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the results of a locations search based on a list of single-field text inputs.
     */
    async deleteLocationsByTexts(requestParameters: DeleteLocationsByTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocationsByTextsRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the results of a locations search based on a list of structured address inputs.
     */
    async getLocationsByAddressesRaw(requestParameters: GetLocationsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationsSearchResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLocationsByAddresses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsSearchResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the results of a locations search based on a list of structured address inputs.
     */
    async getLocationsByAddresses(requestParameters: GetLocationsByAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationsSearchResponse> {
        const response = await this.getLocationsByAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the status of a locations search based on a list of structured address inputs.
     */
    async getLocationsByAddressesStatusRaw(requestParameters: GetLocationsByAddressesStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationsSearchStatusResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLocationsByAddressesStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-addresses/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsSearchStatusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status of a locations search based on a list of structured address inputs.
     */
    async getLocationsByAddressesStatus(requestParameters: GetLocationsByAddressesStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationsSearchStatusResponse> {
        const response = await this.getLocationsByAddressesStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the results of a locations search based on a list of positions.
     */
    async getLocationsByPositionsRaw(requestParameters: GetLocationsByPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationsSearchResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLocationsByPositions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsSearchResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the results of a locations search based on a list of positions.
     */
    async getLocationsByPositions(requestParameters: GetLocationsByPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationsSearchResponse> {
        const response = await this.getLocationsByPositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the status of a locations search based on a list of positions.
     */
    async getLocationsByPositionsStatusRaw(requestParameters: GetLocationsByPositionsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationsSearchStatusResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLocationsByPositionsStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-positions/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsSearchStatusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status of a locations search based on a list of positions.
     */
    async getLocationsByPositionsStatus(requestParameters: GetLocationsByPositionsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationsSearchStatusResponse> {
        const response = await this.getLocationsByPositionsStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the results of a locations search based on a list of single-field text inputs.
     */
    async getLocationsByTextsRaw(requestParameters: GetLocationsByTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationsSearchResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLocationsByTexts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-texts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsSearchResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the results of a locations search based on a list of single-field text inputs.
     */
    async getLocationsByTexts(requestParameters: GetLocationsByTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationsSearchResponse> {
        const response = await this.getLocationsByTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the status of a locations search based on a list of single-field text inputs.
     */
    async getLocationsByTextsStatusRaw(requestParameters: GetLocationsByTextsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationsSearchStatusResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getLocationsByTextsStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/locations/by-texts/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsSearchStatusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status of a locations search based on a list of single-field text inputs.
     */
    async getLocationsByTextsStatus(requestParameters: GetLocationsByTextsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationsSearchStatusResponse> {
        const response = await this.getLocationsByTextsStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
